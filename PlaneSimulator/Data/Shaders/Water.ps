SamplerState SampleType;

Texture2D reflectionTexture : register( t0 );
Texture2D refractionTexture : register( t1 );
Texture2D wavesTexture      : register( t2 );

//////////////////////
////   TYPES
//////////////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
    float4 reflectionPosition : TEXCOORD1;
    float4 refractionPosition : TEXCOORD2;
	float fogFactor : FOG;
	float depth : DEPTH;
};

//////////////////////
////   Pixel Shader
/////////////////////
float4 WaterPixelShader(PixelInputType input) : SV_TARGET
{
    float2 reflectTexCoord;
    float2 refractTexCoord;
	float4 reflectionColor;
	float4 refractionColor;
	
    // Calculate the projected reflection texture coordinates.
    reflectTexCoord.x = input.reflectionPosition.x / input.reflectionPosition.w / 2.0f + 0.5f;
    reflectTexCoord.y = -input.reflectionPosition.y / input.reflectionPosition.w / 2.0f + 0.5f;

    // Calculate the projected refraction texture coordinates.
    refractTexCoord.x = input.refractionPosition.x / input.refractionPosition.w / 2.0f + 0.5f;
    refractTexCoord.y = -input.refractionPosition.y / input.refractionPosition.w / 2.0f + 0.5f;

    reflectionColor = reflectionTexture.Sample(SampleType, reflectTexCoord);
    refractionColor = refractionTexture.Sample(SampleType, refractTexCoord);
	
	float depthFactor = saturate(-input.depth/300);
	float4 color = float4(0.05f, 0.15f, 0.35f, 1)*depthFactor + float4(0.2f, 0.4f, 0.9f, 0.5f)*(1-depthFactor);
	return color*0.5f + (reflectionColor+refractionColor)*0.5f;
	//return (color)*(input.fogFactor) + (1-input.fogFactor)*(float4(0.75,0.75,0.75,1));
}